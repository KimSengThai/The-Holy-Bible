
*To Create Our First Server (using Express)
_How to teach our server (location of server) (end point)	->	localhost:3000
_Local host means hosting our own server locally (to our computer)
_Port means ways to get into a server using unique number	->	sudo lsof -i -P -n | grep LISTEN
_Many ways or doors because it has to listen to different request
_To stop the server to runs after creating step 6		->	control C
_To install everything if you download node online		->	npm install


*HTTP Request
_HyperText Transfer Protocol	->	For client computer to communicate with the server side.
_Get				->	Request a resource from the server (getting something from the server)
_Post				->	Sending a resource to the server eg sign up form
_Put				->	Update method by replacing it completely
_Patch				->	Update method by patch up a resource (only send what is required)
_Delete				->	Delete resource from the server side
_So when you see the word (Cannot Get /) its because our server do not have any code of resource yet.
_To get the server from saying Hello, World! using Get
	app.get("/", (req, res) => {
		res.send("Hello, World!");
	});

_You can not run two server at the same time. You need to quit the server and restart with node to edit the server.
_Use nodemon to automatically restart the node application when there is a change. It will modified with only a save.
_To install globally		->	npm i -g nodemon
_To use 			->	nodemon index.js
_To create another end point.

	app.get("/contact", (req, res) => {
    		res.send("<h1>hello</h1>");
	});

_HTTP Response types
_Information responses (100-199)  100 Hold on
_Successful responses (200-299)	  200 Here you go
_Redirection messages (300-399)	  300 Go away
_Client error responses (400-499) 400 You fuck up
_Server error responses (500-599) 500 I fuck up


*Postman
_Developer tools allow to create a backend without a frontend. Testing backend.
_Software testing tools for API
_can combine URL + HTTP Request Types
_To change data use post method: 	Choose body -> raw -> JSON and edit from there.
_When using different types of HTTP Request and see HTTP Response types for status:
	Get	->	Just need to click, because it is just requesting resource from the server
	Post	->	Just need to click, because it is just sending resource to the server.
	Put	->	Replacing resource such as making an account and setting up password (required everything to be send)
	Patch	->	Just changing one thing such as name (updating user)
	Delete	->	Delete the resources from the server (such as deleting account)


*Middlewares (Types)
_Between server and routes (HTTP Request Types)
_They can pre process request, change aspect of request
_Four Types of Middleware:
	Pre-processing (body-parser) - request for multiple handlers and change aspect of the request
	Login request (morgan) - user login
	Authentication - checking if the client is authorise to make a request
	Error Handling - identify errors

_Normally this is needed (next), however middleware automatically import next() so we dont need to use it when using NPM
// app.use((req, res, next) => {
//   res.status404().json({
//     status: "fail",
//   });
// });


*Body Parser
_Mainly deal with user input
_An npm module used to process data send in an HTTP request body.
_Create request under 									->	req.body
_Eg of Body Parsing (Body parsing middleware, request a body property)

	import express from "express";								// import body parser module using import method

	const app = express();
	const port = 3000;

	app.use(express.json());								//Only need this line to use req.body as json format

	app.get("/", (req, res) => {								// sumit button from HTML to here. Request a resource from the server (Get)
  		res.sendFile(__dirname + "/public/index.html");					// req is the request object from the server
	});											// res is response object to send data back to client
												 
	app.post("/submit", (req, res) => {							// .body means information from body parsing, 
  		console.log(req.body)								// post to send resource to the server
	});

	app.listen(port, () => {
  		console.log(`Listening on port ${port}`);
	});

_Express and Body Parser is now integrated, dont need to use it as NPM anymore.


*Morgan
_Use to log request in the server.
_It provides a simple way to log information about incoming requests. 
_Such as the request method, URL, response status, and execution time. 
_This can be valuable for debugging, monitoring, and analyzing the behavior of your web server.
_Create a logger middleware function using format and options.
_Function will have three arguments: tokens (objects will all defined tokens), req(HTTP request) and res(HTTP response).
_Function will return a string or undefined/null.

_Eg for Morgan
	import express from "express";
	import morgan from 'morgan';

	const app = express();
	const port = 3000;

	app.use(morgan('tiny'))					// Using predefined format string

	app.get("/", (req, res) => {
  		res.send("Hello");
	});

	app.listen(port, () => {
  		console.log(`Listening on port ${port}`);
	});


*Building our own Middleware (custom middlewares)
_All middleware require red, res, next() by using app.use() method.
_next() determine when you should finish with the current middleware and move on to the next method.

_Eg for custom middleware (we name it logger)

	import express from "express";

	const app = express();
	const port = 3000;

	app.use(logger);						// calling custom function

	function logger(req, res, next) {				// created a custom function for method of getting request and request url
  		console.log("Request Method: ", req.method)
  		console.log("Request URL: ", req.url)
  		next();							// needed if we are using our own NPM, just a function to pass to next middleware, which is app.get
	}

	app.get("/", (req, res) => {
  		res.send("Hello");
	});

	app.listen(port, () => {
  		console.log(`Listening on port ${port}`);
	});


*Challenge (Client getting back their input)
_Using Body Parser and Custom Middleware


	import express from "express";
	import bodyParser from "body-parser";
	import { dirname } from "path";
	import { fileURLToPath } from "url";

	const __dirname = dirname(fileURLToPath(import.meta.url));

	const app = express();
	const port = 3000;
	var bandName = "";

// ability to pass urlendcoded data
	app.use(bodyParser.urlencoded({ extended: true }));

// custom middleware, create a bandNametake which is req for input name from the client side
	function bandNameGenerator(req, res, next) {
  		console.log(req.body);
  		bandName = req.body["street"] + req.body["pet"];
  		next();
	}

	app.use(bandNameGenerator);

// Get a resource from our server and it respond by sending HTML file
	app.get("/", (req, res) => {
  		res.sendFile(__dirname + "/public/index.html");
	});

// send resource to our server which is submit and the server respond by sending something back
	app.post("/submit", (req, res) => {
 		res.send(`<h1>Your band name is:</h1><h2>${bandName}✌️</h2>`);
	});

	app.listen(port, () => {
  		console.log(`Listening on port ${port}`);
	});


*Project - Display another page after user entering a password. (If Else)

import express from "express";
import bodyParser from 'body-parser';

import { dirname } from "path";
import { fileURLToPath } from "url";
const __dirname = dirname(fileURLToPath(import.meta.url));

var urlencodedParser = bodyParser.urlencoded({ extended: true })

const app = express();
const port = 3000;

app.use(bodyParser.urlencoded({ extended: true }));

app.get("/", (req, res) => {
    res.sendFile(__dirname + "/public/index.html");
});

app.post("/check", (req, res) => {
    if (req.body.password == "ILoveProgramming") {
        res.sendFile(__dirname + "/public/secret.html");
    } else {
        res.sendFile(__dirname + "/public/index.html");
    }
    });

app.listen(port, () => {
    console.log(`Listening on port ${port}`);
});


*Authentication
_npm i bcryptjs cookie-parser cors dotenv express express-validator jsonwebtoken passport passport-jwt pg

_express-validator use for checking the email, username, password requirement. (making sure length is good, no repeated word)
_bcrypt use for hashing the password.
_jsonwebtoken
_cookie-parser
_passport
_passport-jwt


import "dotenv/config";
import express from "express";
import cors from "cors";
import * as db from "./db/index.js";
import { check, validationResult } from "express-validator";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import cookieParser from "cookie-parser";
import passport from "passport";
import { Strategy } from "passport-jwt";

const CLIENT_URL = process.env.CLIENT_URL;
const SECRET = process.env.SECRET;

const app = express();
const port = 4000;

app.use(express.json());
app.use(cookieParser());
app.use(cors({ origin: CLIENT_URL, credentials: true }));
app.use(passport.initialize());

//checking password, email and username with express-validator
const password = check("password")
  .isLength({ min: 6, max: 15 })
  .withMessage("Passsword has to be between 6 and 15 characters");

const email = check("email")
  .isEmail()
  .withMessage("Please provide a valid email");

const emailExists = check("email").custom(async (value) => {
  const { rows } = await db.query("SELECT * from users WHERE email = $1", [
    value,
  ]);
  if (rows.length) {
    throw new Error("Email already exists.");
  }
});

const usernameExists = check("username").custom(async (value) => {
  const { rows } = await db.query("SELECT * from users WHERE username = $1", [
    value,
  ]);
  if (rows.length) {
    throw new Error("Username already exists.");
  }
});

const regiserValidation = [password, email, emailExists, usernameExists];

//login validation check
const loginFieldsCheck = check("email").custom(async (value, { req }) => {
  const user = await db.query("SELECT * from users WHERE email = $1", [value]);
  if (!user.rows.length) {
    throw new Error("Email does not exists");
  }
  //password check
  const validPassword = await bcrypt.compare(
    req.body.password,
    user.rows[0].password
  );

  if (!validPassword) {
    throw new Error("Wrong password");
  }

  req.user = user.rows[0];
});

//custom function for validationMiddleware
function validationMiddleware(req, res, next) {
  let errors = validationResult(req);

  if (!errors.isEmpty()) {
    return res.status(400).json({
      errors: errors.array(),
    });
  }

  next();
}

//custum function if the user send cookie back after successful login
const cookieExtractor = function (req) {
  let token = null;
  if (req && req.cookies) token = req.cookies["token"];
  return token;
};

const opts = {
  secretOrKey: SECRET,
  jwtFromRequest: cookieExtractor,
};

passport.use(
  new Strategy(opts, async ({ id }, done) => {
    try {
      const { rows } = await db.query(
        "SELECT user_id, email, username FROM users WHERE user_id = $1",
        [id]
      );

      if (!rows.length) {
        throw new Error("401 not authorized");
      }
      let user = {
        id: rows[0].user_id,
        email: rows[0].email,
        username: rows[0].username,
      };
      return await done(null, user);
    } catch (error) {
      console.error(error.message);
      done(null, false);
    }
  })
);

const userAuth = passport.authenticate("jwt", { session: false });


//User Authentication, Email and Password
//Get all user name and email
app.get("/getuser", async (req, res) => {
  try {
    const results = await db.query(
      "select user_id, username, email FROM users"
    );
    res.status(200).json({
      status: "success",

      users: results.rows,
    });
  } catch (error) {
    console.log(error);
  }
});

//Register, POST also included validation and hash password from bcrypted
app.post(
  "/register",
  regiserValidation,
  validationMiddleware,
  async (req, res) => {
    const { email, password, username } = req.body;
    try {
      const hashedPassword = await bcrypt.hash(password, 10);
      await db.query(
        "INSERT INTO users (email, password, username) VALUES ($1, $2, $3)",
        [email, hashedPassword, username]
      );

      res.status(200).json({ message: "Registration successful!" });
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: "Internal server error" });
    }
  }
);

//Login, check
app.post("/login", loginFieldsCheck, validationMiddleware, async (req, res) => {
  let user = req.user;
  let payload = {
    id: user.user_id,
    email: user.email,
    username: user.username,
  };
  try {
    const token = await jwt.sign(payload, SECRET);
    res
      .status(200)
      .cookie("token", token, { httpOnly: true })
      .json({ status: "success", message: "Logged in successfully" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Internal server error" });
  }
});

//Protected route
app.get("/protected", userAuth, async (req, res) => {
  try {
    res.status(200).json({ info: " protected info" });
  } catch (error) {}
});

//Logout route
app.get("/logout", userAuth, async (req, res) => {
  try {
    res
      .status(200)
      .clearCookie("token", { httpOnly: true })
      .json({ status: "success", message: "Logged out successfully" });
  } catch (error) {
    console.error(error);
  }
});










