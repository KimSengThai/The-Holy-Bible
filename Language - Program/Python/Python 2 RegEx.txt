
TABLE OF CONTENT
1. In Python
2. Example Reg Ex
3. Syntax Regular Expressions (Ranges)
4. RegEx Functions
5. Quantifiers
6. Excercise Check For Valid Username: 6 to 15 characters, any alphabets/digits/_ , should not start with a digit
7. Boundaries and Anchors
8. Either
9. Capturing
10. Phone Number
11. Currency Format
12. Email Address Format


*RegEx In Python
_Contains informations such as Character Classes, Ranges, Quantifiers, Boundaries and Anchors, Capturing Groups, Assertions.
_Use to check for matches characters.

*Example Reg Ex
import re						->	To import the re module

pattern = r"^[abc]"					->	Character Classes: Pattern begins with a, b or c due to ^, asserts the start of the line.[] means matches with anyone.

regex = re.compile(pattern)				->	Compile the pattern to regex variable

text1 = 'dog'						->	Letter start with d so does not match the pattern
text2 = 'cat'						->	Letter start with c so it matches the pattern

print( regex.findall(text1))				->	findall will give an empthy list
print( regex.findall(text2))				->	findall will give ['c']

print( regex.search(text1))				->	search will give None
print( regex.search(text2))				->	search will give span=(0,1), match='c'


*Syntax Regular Expressions (Ranges)
_pattern = r"[A-Z]"					->	Matches any character from A to Z (captials only!)
_pattern = r"[A-Za-z]"					->	Matches any character from A to Z and a to z (both caps and lowcaps)
_pattern = r"[\.]					->	Matches . , use \ (e) before special characters
_pattern = r"[^a-z]					->	Matches anything except a to z
_\w							->	Equaivalent to [0-9a-zA-Z], anything that is not \w would be \W
_\d							->	Equaivalent to [0-9], anything that is not \d would be \D
_\s 							->	Matches every white spaces (tabs, space, newline), anything that is not \s would be \S
_.							->	Matches anything but a newline


*RegEx Functions
_re.findall(A, B)					->	Matches all instances of an expression A in a string B and returns them in a list.
_re.search(A, B) 					->	Matches the first instance of an expression A in a string B, and returns it as a re match object
_re.split(A, B)						->	Split a string B into a list using the delimiter A
_re.sub(A, B, C)					->	Replace A with B in the string C.


*Quantifiers
_Look for how many occurances to look for. Put it after the regular expressions [].
_r"^[0-9]+$"						->	Look for number 0 to 9 from start to end of of the continuous string. ^$: to look for exact!
_r"^M[rsx]\.?$"						->	matches strings that start with "M" followed by either "r", "s", or "x", optionally followed by a period, and nothing else after that. Eg: "Mr.", "Ms.", "Mx."

	+						->	Match one or more occurences				
	*						->	O or more, means it count empthy string
	?						->	0 or 1, means no occurence or a single occurence only!
	{3}						->	Exactly 3
	{3,}						->	Atleast 3
	{3,5}						->	Between 3 and 5


*Excercise Check For Valid Username: 6 to 15 characters, any alphabets/digits/_ , should not start with a digit
_r"^[a-zA-Z]\w{5,14}$" or r"^[a-zA-Z][a-zA-Z0-9_]{5,14}$"


*Boundaries and Anchors
_\b				->	Matches the boundary (or empty string) at the start and end of a word, that is, between \w and \W.
_r"\b[a-zA-Z_]\w{3,14}\b"	->	Starts with an alphabet or underscore. 
					Followed by 3 to 14 characters consisting of alphabets, digits, or underscores.
					The entire username is a separate word, not part of a larger word.


*Either
_|				->	Give us or option
_r"Mr\.|Mrs\.|Ms\."		->	Give us either options of literal strings "Mr.", "Mrs.", and "Ms." 


*Capturing Groups and Backreferences
_Can store the group and use it
_(,|\.)				->	This captures either a comma or a period using the alternation operator |. The parentheses are used for grouping.
_\1				->	Paste the first capturing group (can do more number)
_(?:)				->	Non-capturing group
_r"^(,|\.)[0-9]{2}\1$"		->	The string starts with either a comma or a period.
					Followed by exactly two digits.
					Ends with the same character that appeared at the beginning. \1


*Exercise: (Capturing)
		Create a pattern for Date Format, YYYY-MM-DD or YYYY/MM/DD or YYYY.MM.DD or YYYY MM DD, 
		Year will start 1000, 
		Months should be 01 to 12, 
		Day should be 01 to 31

_Answer: (Using -, . and space as backreferences () )

	import re

	date_pattern = r"^[12][0-9]{3}([-/. ])(?:0[1-9]|1[0-2])\1(?:0[1-9]|[12][0-9]|3[0-1])$"	

	regex = re.compile(date_pattern)

	print(regex.search("102"))					->		Use this for checking


*Assertions
_(?)			->	Inside parentheses like this, ? acts as an extension notation. Its meaning depends on the character immediately to its right
_(?PAB)			->	Matches the expression AB, and it can be accessed with the group name
_A(?=B) 		->	Lookahead assertion. This matches the expression A only if it is followed by B.
_(?P=name)		->	Matches the expression matched by an earlier group named “name”


*Excercise: (Assertions)
	
	Atleast 6 characters with 1 uppercase, 1 lowercase, 1 digit, 1 special characters (!@#$&*)

_Answer: 

	password_pattern = r"^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[!@#$&*]).{6,}$"

	regex = re.compile(password_pattern)

	print(regex.search("102"))					->		Use this for checking


_^: Asserts the start of the string.
_(?=.*[A-Z]):	 Positive lookahead assertion ensuring that the string contains at least one uppercase letter.
_(?=.*[a-z]):	 Positive lookahead assertion ensuring that the string contains at least one lowercase letter.
_(?=.*\d):	 Positive lookahead assertion ensuring that the string contains at least one digit.
_(?=.*[!@#$&*]): Positive lookahead assertion ensuring that the string contains at least one special character from the specified set.
_.{7,}:		 Matches any character (except newline) at least 7 times.
_$:		 Asserts the end of the string.


*Excercise: (Phone Number)

	(1 to 3 digit country code) 3 digit area code, 4 digit phone number

_Answer
	import re

	phone_number_pattern = r"^\([0-9]{1,3}\)[ ]?[0-9]{3}[ -]?[0-9]{4}$"

	regex = re.compile(phone_number_pattern)

	print(regex.search("102"))					->		Use this for checking


*Excercise: (Currency Format)

	$1,000.00

_Answer
	import re

	currency_pattern = r"^\$?$[0-9]{1,3}(?:,\d{3})*(?:\.\d{2})$"

	regex = re.compile(currency_pattern )

	print(regex.search("$1,000.00"))					->		Use this for checking


*Excercise: (Email Address Format)

	Allowed characters for username and second-level domain.
	top-level domain (.com, .au, etc.) to be atleast 2 letters.

_Answer
	import re

	email_pattern = r"^$"

	regex = re.compile(email_pattern)

	print(regex.search("123test@gmail.com"))					->		Use this for checking


















