
*Python Database Stuffs (SQLite)

*Connecting to SQLite to Python
_Open python command shell
_import sqlite3							->	Import sqlite to python
_CONN = sqlite3.connect("demo.db")				->	Connect to the database file
_CURSOR = CONN.cursor()						->	Cursor cct as a middleware between SQL query and database connection

_.quit								->	To quit command shell

*CURSOR Method (Table list in Python)
_CURSOR.execute("SELECT * FROM table") 				->	Return cursor object, use fetch to retreive the tables.
_CURSOR.execute("SELECT * FROM table WHERE id=?", (1,))		->	Return cursor object, need to be tuple, single tuple need ","
_CURSOR.fetchall()						->	Return current cursor object as a list of tuple
_CURSOR.fetchone()						->	Return current cursor object as a tuple, will always return the first one
_CURSOR.fetchmany(3)						->	Return current cursor object as a specific (3) list of tuple
_CURSOR.execute("SELECT * FROM table").fetchall()		->	Return a list by combining execute and fetchall

_CURSOR.executemany("INSERT INTO table (column) VALUES (?)", [("value",),("value",)])


*Object Relational Mapping (ORM)
_ORM is a technique of accessing in a relational database using an object-oriented programming language
_Classes	->	Tables
_Instances	->	Rows


*Mapping Python Classes to a Database

***config.py

import sqlite3                                  #Imports the SQLite module to work with the SQLite database.

CONN = sqlite3.connect("students.db")           #Connection object for storing in CONN, if not exist it will create it
CURSOR = CONN.cursor()                          #Cursor server as a middleware between queries and connections



***student.py

from config import CONN, CURSOR                         #Import from onfig file (same root)

class Student:
    # Class attributes, Defined inside the class but outside any methods. Shared among all instances.
    # Use for class method
    # Defaul value for class method
    all = []                                            #Class variable that will store all instances of the Student

    # Initializes a new Student instance with the given attributes.
    # Instance attribute, Instance Attributes: These are defined inside the __init__ method (or other instance methods). They are unique to each instance.
    # Use for instance method
    def __init__(self, name, degree, year_level):      
        self.id = None                                  #No need to initialise it because id is primary
        self.name = name                                #set the name attribute, instance attributes
        self.degree = degree
        self.year_level = year_level

    # Provides a string representation of the Student instance.
    # Instance attribute
    # Use for instance method
    def __str__(self):                                  #define a string method for Student class
        return f"({self.id}) - {self.name}"             #The method return a default of student

    # Saves the current Student instance to the database.
    # Instance method, defined within the class and operate on instances 
    def save(self):
        sql = """
        INSERT INTO students (name, degree, year_level) VALUES (?, ?, ?)
        """
        CURSOR.execute(sql, (self.name, self.degree, self.year_level))
        CONN.commit()

        self.id = CURSOR.execute("SELECT last_insert_rowid() FROM students").fetchone()[0]

    # Creates and saves a new Student instance to the database using the class method.
    # Class method, defined within the class and operate on the class itself
    @classmethod
    def create(cls, name, degree, year_level):
        student = cls(name, degree, year_level)
        student.save()

    # Finds a student by their id.
    @classmethod
    def find_by_id(cls, id):
        sql = "SELECT * FROM students WHERE id=?"
        student = CURSOR.execute(sql, (id,)).fetchone()
        return student

    # Finds students by their name.
    @classmethod
    def find_by_name(cls, name):
        sql = "SELECT * FROM students WHERE name=?"
        student = CURSOR.execute(sql, (name,)).fetchall()
        return student
    
    # Retrieves all student records from the database.
    @classmethod
    def get_all(cls):
        sql = "SELECT * FROM students"
        all = CURSOR.execute(sql).fetchall()
        cls.all = [cls.new_from_db(row) for row in all]
        return cls.all

    # Creates a new Student instance from a database row.
    @classmethod
    def new_from_db(cls, row):
        student = cls(row[1], row[2], row[3])  # name, degree, year_level
        student.id = row[0]
        return student

    # Creates the students table if it doesn't already exist.
    @classmethod
    def create_table(cls):
        sql = """
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            degree TEXT NOT NULL,
            year_level INTEGER NOT NULL
        )
        """
        CURSOR.execute(sql)
        CONN.commit()

    # Drops the students table if it exists.
    @classmethod
    def drop_table(cls):
        sql = "DROP TABLE IF EXISTS students"
        CURSOR.execute(sql)

    # Instance Method are bound to an instance of the class, Class Method are bound to the class itself.
    # Instance Method take self as parameter, Class Method take cls as first parameter
    # Instance Method used to define behaviors that are related to an instance of class, Class Method are for class itself, used for factory methods
    # Instance Method would change only that instance (Inserting, Save, Updating)
    # Use instance methods when you are operating on specific instances of the class. 
    # This typically involves actions like modifying the data related to a single instance, saving an instance to the database, 
    # or manipulating instance-specific attributes.
    # Class Method would change the whole class itself (Getting, Finding, Create Table)
    # Use class methods for operations that pertain to the class as a whole. This includes actions like querying the database to retrieve multiple records, 
    # performing operations that affect all instances, or creating instances in a way that requires class-level data.
    # Instance methods operate on instances of the class. To call an instance method and access instance attributes from outside the class, 
    # you need to create an instance of the class.
    # Eg:
    # student1 = Student("Kim", "Civil", 4)
    # student1.save()  # Saves student1 to the database
    # student1.update_grade(5)  # Updates the year level of student1

    # Class methods operate on the class itself. To call a class method from outside the class, 
    # you can call it directly on the class without creating an instance.
    # Eg:
    # Student.create_table()  # Creates the students table in the database
    # Student.change_school_name("ABC School")  # Changes the school name for all instances
    # new_student = Student.create("Another Chris", "CS", 4)  # Creates and saves a new student instance



***student-demo.py

from student import Student  # Import the Student class from student.py.

# Accessing Class and Instance Methods

Student.create_table()  # Create the table in the database using the class method.

student1 = Student("Kim", "Civil", 4)
student2 = Student("David", "NEET", 4)
student3 = Student("Chris", "Model", 4)

# Using Instance Methods to save student instances to the database
student1.save()  # Save student1 to the database
student2.save()  # Save student2 to the database
student3.save()  # Save student3 to the database

# student1.update_grade(6)  # Modify instance attribute via method

# Using a Class Method to create and save a new student instance to the database
# Access via the class itself
student_instance = Student.create("Another Chris", "CS", 4)























