
**Data Structure (List [], Tuple (), Set {}, Dictionay {})
_Sequence		->		a data structure in which data is stored and accessed in a specific order.
_Index			->		the location, represented by an integer, of an element in a sequence.
_Iterable		->		able to be broken down into smaller parts of equal size that can be processed in turn. You can loop through any iterable object.
_Slice:			->		a group of neighboring elements in a sequence.
_Mutable		->		an object that can be changed.
_Immutable		->		an object that cannot be changed. (Many immutable objects appear mutable because programmers reuse their names for new objects.)
_List			->		a mutable data type in Python that can store many types of data. The most common data structure in Python.
_Tuple			->		an immutable data type in Python that can store many types of data.
_Range			->		a data type in Python that stores integers in a fixed pattern.
_String			->		an immutable data type in Python that stores unicode characters in a fixed pattern. Iterable and indexed, just like other sequences.


*List 	[item1, item2] 
_Order is important
_Unmuted, can make any changes 
_Similar to arrays in JavaScript, 
_To extract the list variable = [1, 2, 3, 4, 5] use:
							print(variable[0])	->	To get 1
							variable[:2]		->	[1, 2]
							variable[1:3]		->	[2, 3]
_To insert object to the end of the list					->	list_name.append("Insert Object")
_To add multiple items to end of list						->	list_name.extend(["object1", "object2"])
_Adding two list inside a list							->	list_name = [list_small_1, list_small_2]
_To replace the list								->	list_name["index"] = "Object to replace"
_List Comprehension (Refactoring)						->	Compress everything into a single code
			tripled_number = [n * 3 for n in numbers]		->	Refactoring using loop to triple the list, numbers are list variable
			uppercase_names = [name.upper() for name in names]	->	Refactoring using loop to uppercase the list, names are list variable


*Tuple	(item1, item2) 
_Order is important
_Muted, can not make any changes
_Use for constant value such as coordinate. Eg. color - RBG, etc.
_ACCESS THE SAME AS LIST, ONLY DIFFERENCE IS BRACKET AND MUTED (can not be change!)
_To extract the tuple variable = (1, 2, 3, 4, 5) use:
							print(variable(0))	->	To get 1


*Set	{item1, item2} 
_Order is not important
_Similar to object in JS
_No repeated items
_If there are true first then everything else would be ignore, meaning the whole set is true and via versa!
_Access via looping.
_To extract the set variable, months = {"Jan", "Feb", "Mar"} use:
							for month in months:	->	months is the variable and month (can be any) is the individual
							    print(month)	->	will print Jan, Feb, Mar	


*Dictionary {key1=item1, key2=item2} 
_Order is important with newer version
_Similar to object in JS
_No duplicate
_Access normally via keys
_To extract the dictionary variable, person = {"name":"Kim", "age": 26} use:
				print(person["name"])				->	This will print "Kim"
				another_person = dict(name = "John", age = 20)	->	Normally you have to wrap key in string, use dict() without wrapping
				

*Data Structure Exercise
_Get repository						->		git clone https://github.com/learn-co-curriculum/python-p3-data-structures-lab
_For python packages use, create virtual environment	->		pipenv install
_To activate the shell, to use package			->		pipenv shell
_To test and see if its running				->		pytest -x


*Data Structures Lab

spicy_foods = [
    {
        "name": "Green Curry",
        "cuisine": "Thai",
        "heat_level": 9,
    },
    {
        "name": "Buffalo Wings",
        "cuisine": "American",
        "heat_level": 3,
    },
    {
        "name": "Mapo Tofu",
        "cuisine": "Sichuan",
        "heat_level": 6,
    },
]


1. 	Define a function get_names() that takes a list of spicy_foods and returns a list of strings with the names of each spicy food.

def get_names(spicy_foods):
	return [food["name"] for food in spicy_foods]				->	food is a place holder for each array, start from first to last


2. 	Define a function get_spiciest_foods() that takes a list of spicy_foods and returns a list of dictionaries where the heat level of the food 
	is greater than 5.

def  get_spiciest_foods(spicy_foods):
	return [food for food in spicy_foods if food["heat_level"] > 5]		->	returning all dictionaries if heat_level more than 5


3. 	Define a function print_spicy_foods() that takes a list of spicy_foods and output to the terminal each spicy food in the following format 
	using print(): Buffalo Wings (American) | Heat Level: ðŸŒ¶ðŸŒ¶ðŸŒ¶.

def print_spicy_foods(spicy_foods):
    for food in spicy_foods:
        name = food["name"]
        cuisine = food["cuisine"]
        heat_level = "ðŸŒ¶" * food["heat_level"]
        print(f"{name} ({cuisine}) | Heat Level: {heat_level}")


4.	Define a function get_spicy_food_by_cuisine() that takes a list of spicy_foods and a string representing a cuisine, and returns a single dictionary 
	for the spicy food whose cuisine matches the cuisine being passed to the method.

def get_spicy_food_by_cuisine(spicy_foods, cuisine):
    for food in spicy_foods:
        if food["cuisine"] == cuisine:
            return food								->	pass the cousin and return the specific food


5.	Define a function print_spiciest_foods() that takes a list of spicy_foods and outputs to the terminal ONLY the spicy foods that have a heat level 
	greater than 5, in the following format:

def print_spiciest_foods(spicy_foods):
    spiciest_foods = get_spiciest_foods(spicy_foods)
    print_spicy_foods(spiciest_foods)						->	Using existing function above
	

6.	Define a function average_heat_level() that takes a list of spicy_foods and returns an integer representing the average heat level of all the 
	spicy foods in the array. Recall that to derive the average of a collection, you need to calculate the total and divide number of elements in 
	the collection.

def get_average_heat_level(spicy_foods):
    total_heat_level = sum(food["heat_level"] for food in spicy_foods)
    num_foods = len(spicy_foods)
    if num_foods == 0:
        return 0
    else:
        return total_heat_level // num_foods


7.	Define a function create_spicy_food() that takes a list of spicy_foods and a new spicy_food and returns the original list with the new spicy_food 
	added.

def create_spicy_food(spicy_foods, spicy_food):
    spicy_foods.append(spicy_food)
    return spicy_foods



*Data Exercise 
_Create a program where we will keep a list of students:
_Add student to the list
_Print all the students

_Answer
student_list = list()

def print_student():
    index = 1
    for student in student_list:
        print(f"{index}. {student['name']}({student['degree']})")
        index += 1

def add_student(name, degree):
    new_student = {"name":name, "degree":degree}
    student_list.append( new_student )

def input_student_info():
    print("Enter the name of the student")
    name = input()
    print("Enter the degree of the student")
    degree = input()
    add_student(name, degree)
    print(f"{name} is added")

def menu():
    print("1 - Print all students")
    print("2 - Add a new students")
    print("Any key - exit the program")

print("Welcome to the Student App!")

repeat = True

while repeat:
    menu()
    choice = input()

    if choice == "1":
        print_student()
    elif choice == "2":
        input_student_info()
    else:
        repeat = False











